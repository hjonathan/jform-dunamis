{"remainingRequest":"/Users/qsrodri/pm4/jsonforms-vuetify-renderers/node_modules/babel-loader/lib/index.js!/Users/qsrodri/pm4/jsonforms-vuetify-renderers/node_modules/ts-loader/index.js??ref--14-2!/Users/qsrodri/pm4/jsonforms-vuetify-renderers/node_modules/eslint-loader/index.js??ref--13-0!/Users/qsrodri/pm4/jsonforms-vuetify-renderers/example/src/core/jsonSchemaValidation.ts","dependencies":[{"path":"/Users/qsrodri/pm4/jsonforms-vuetify-renderers/example/src/core/jsonSchemaValidation.ts","mtime":1645564537320},{"path":"/Users/qsrodri/pm4/jsonforms-vuetify-renderers/node_modules/cache-loader/dist/cjs.js","mtime":1645571717127},{"path":"/Users/qsrodri/pm4/jsonforms-vuetify-renderers/node_modules/babel-loader/lib/index.js","mtime":1645571722465},{"path":"/Users/qsrodri/pm4/jsonforms-vuetify-renderers/node_modules/ts-loader/index.js","mtime":1645571723037},{"path":"/Users/qsrodri/pm4/jsonforms-vuetify-renderers/node_modules/eslint-loader/index.js","mtime":1645571717701}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL3Fzcm9kcmkvcG00L2pzb25mb3Jtcy12dWV0aWZ5LXJlbmRlcmVycy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciBmcm9tICIvVXNlcnMvcXNyb2RyaS9wbTQvanNvbmZvcm1zLXZ1ZXRpZnktcmVuZGVyZXJzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvcXNyb2RyaS9wbTQvanNvbmZvcm1zLXZ1ZXRpZnktcmVuZGVyZXJzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgKiBhcyBtb25hY28gZnJvbSAnbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2VkaXRvci5hcGknOwppbXBvcnQgeyBqc29uU2NoZW1hRHJhZnQ3LCBydWxlU2NoZW1hLCB1aVNjaGVtYSB9IGZyb20gJy4uL2NvcmUvanNvbnNjaGVtYSc7Ci8qKgogKiBSZWdpc3RlciBhIG5ldyBzY2hlbWEgZm9yIHRoZSBKc29uIGxhbmd1YWdlLCBpZiBpdCBpc24ndCBhbHJlYWR5IHJlZ2lzdGVyZWQuCiAqIFNjaGVtYXMgYXJlIGlkZW50aWZpZWQgYnkgdGhlaXIgdXJpIGFuZCBmaWxlTWF0Y2ggcnVsZSwgc28gdGhhdCB0aGV5IGRvbid0CiAqIGxlYWsgaW50byB1bnJlbGF0ZWQgSnNvbiBlZGl0b3JzLgogKiBAcGFyYW0gZWRpdG9yCiAqICBUaGUgbW9uYWNvIGVkaXRvcgogKiBAcGFyYW0gc2NoZW1hcwogKiAgU2NoZW1hcyB0byByZWdpc3RlcgogKi8KCmV4cG9ydCB2YXIgYWRkU2NoZW1hID0gZnVuY3Rpb24gYWRkU2NoZW1hKGVkaXRvciwgc2NoZW1hcykgewogIHZhciByZWdpc3RlcmVkU2NoZW1hcyA9IGVkaXRvci5sYW5ndWFnZXMuanNvbi5qc29uRGVmYXVsdHMuZGlhZ25vc3RpY3NPcHRpb25zLnNjaGVtYXM7CgogIGlmIChyZWdpc3RlcmVkU2NoZW1hcyA9PT0gdW5kZWZpbmVkIHx8IHJlZ2lzdGVyZWRTY2hlbWFzLmxlbmd0aCA9PT0gMCkgewogICAgZWRpdG9yLmxhbmd1YWdlcy5qc29uLmpzb25EZWZhdWx0cy5zZXREaWFnbm9zdGljc09wdGlvbnMoewogICAgICB2YWxpZGF0ZTogdHJ1ZSwKICAgICAgYWxsb3dDb21tZW50czogZmFsc2UsCiAgICAgIGVuYWJsZVNjaGVtYVJlcXVlc3Q6IGZhbHNlLAogICAgICBzY2hlbWFSZXF1ZXN0OiAnd2FybmluZycsCiAgICAgIHNjaGVtYVZhbGlkYXRpb246ICdlcnJvcicsCiAgICAgIHNjaGVtYXM6IF90b0NvbnN1bWFibGVBcnJheShzY2hlbWFzKQogICAgfSk7CiAgfSBlbHNlIHsKICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihzY2hlbWFzKSwKICAgICAgICBfc3RlcDsKCiAgICB0cnkgewogICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHsKICAgICAgICB2YXIgc2NoZW1hID0gX3N0ZXAudmFsdWU7CiAgICAgICAgdmFyIGZpbGVNYXRjaCA9IHNjaGVtYS5maWxlTWF0Y2g7CiAgICAgICAgdmFyIGdyaWRTY2hlbWEgPSByZWdpc3RlcmVkU2NoZW1hcy5maW5kKGZ1bmN0aW9uIChyZWdpc3RlcmVkU2NoZW1hKSB7CiAgICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZFNjaGVtYS5maWxlTWF0Y2ggPT09IGZpbGVNYXRjaCAmJiByZWdpc3RlcmVkU2NoZW1hLnVyaSA9PT0gc2NoZW1hLnVyaTsKICAgICAgICB9KTsKCiAgICAgICAgaWYgKCFncmlkU2NoZW1hKSB7CiAgICAgICAgICByZWdpc3RlcmVkU2NoZW1hcy5wdXNoKF9vYmplY3RTcHJlYWQoe30sIHNjaGVtYSkpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgX2xvb3AoKTsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICB9IGZpbmFsbHkgewogICAgICBfaXRlcmF0b3IuZigpOwogICAgfQogIH0KfTsKLyoqCiAqIENvbmZpZ3VyZXMgdGhlIE1vbmFjbyBFZGl0b3IgdG8gdmFsaWRhdGUgdGhlIGlucHV0IGFnYWluc3QgSlNPTiBTY2hlbWEgRHJhZnQgNy4KICovCgpleHBvcnQgdmFyIGNvbmZpZ3VyZUpzb25TY2hlbWFWYWxpZGF0aW9uID0gZnVuY3Rpb24gY29uZmlndXJlSnNvblNjaGVtYVZhbGlkYXRpb24oZWRpdG9yLCBmaWxlTWF0Y2gpIHsKICAvKiogTm90ZSB0aGF0IHRoZSBNb25hY28gRWRpdG9yIG9ubHkgc3VwcG9ydHMgSlNPTiBTY2hlbWEgRHJhZnQgNyBpdHNlbGYsCiAgICogc28gaWYgd2UgYWxzbyB3YW50IHRvIHN1cHBvcnQgYSBsYXRlciBzdGFuZGFyZCB3ZSBzdGlsbCBoYXZlIHRvIGZvcm1hbGl6ZQogICAqIGl0IGluIEpTT04gU2NoZW1hIERyYWZ0IDcqLwogIGFkZFNjaGVtYShlZGl0b3IsIFtfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGpzb25TY2hlbWFEcmFmdDcpLCB7fSwgewogICAgZmlsZU1hdGNoOiBmaWxlTWF0Y2gKICB9KV0pOwp9OwovKioKICogQ29uZmlndXJlcyB0aGUgTW9uYWNvIEVkaXRvciB0byB2YWxpZGF0ZSB0aGUgaW5wdXQgYWdhaW5zdCB0aGUgVUkgU2NoZW1hIG1ldGEtc2NoZW1hLgogKi8KCmV4cG9ydCB2YXIgY29uZmlndXJlVUlTY2hlbWFWYWxpZGF0aW9uID0gZnVuY3Rpb24gY29uZmlndXJlVUlTY2hlbWFWYWxpZGF0aW9uKGVkaXRvciwgZmlsZU1hdGNoKSB7CiAgLyoqIE5vdGUgdGhhdCB0aGUgTW9uYWNvIEVkaXRvciBvbmx5IHN1cHBvcnRzIEpTT04gU2NoZW1hIERyYWZ0IDcgaXRzZWxmLAogICAqIHNvIGlmIHdlIGFsc28gd2FudCB0byBzdXBwb3J0IGEgbGF0ZXIgc3RhbmRhcmQgd2Ugc3RpbGwgaGF2ZSB0byBmb3JtYWxpemUKICAgKiBpdCBpbiBKU09OIFNjaGVtYSBEcmFmdCA3Ki8KICBhZGRTY2hlbWEoZWRpdG9yLCBbX29iamVjdFNwcmVhZCh7fSwganNvblNjaGVtYURyYWZ0NyksIF9vYmplY3RTcHJlYWQoe30sIHJ1bGVTY2hlbWEpLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHVpU2NoZW1hKSwge30sIHsKICAgIGZpbGVNYXRjaDogZmlsZU1hdGNoCiAgfSldKTsKfTsKLyoqCiAqIENvbmZpZ3VyZXMgdGhlIE1vbmFjbyBFZGl0b3IgdG8gdmFsaWRhdGUgdGhlIGlucHV0IGFnYWluc3QgSlNPTiBTY2hlbWEgbW9kZWwgc2NoZW1hLgogKi8KCmV4cG9ydCB2YXIgY29uZmlndXJlRGF0YVZhbGlkYXRpb24gPSBmdW5jdGlvbiBjb25maWd1cmVEYXRhVmFsaWRhdGlvbihlZGl0b3IsIHVyaSwgZmlsZU1hdGNoLCBzY2hlbWEpIHsKICAvKiogTm90ZSB0aGF0IHRoZSBNb25hY28gRWRpdG9yIG9ubHkgc3VwcG9ydHMgSlNPTiBTY2hlbWEgRHJhZnQgNyBpdHNlbGYsCiAgICogc28gaWYgd2UgYWxzbyB3YW50IHRvIHN1cHBvcnQgYSBsYXRlciBzdGFuZGFyZCB3ZSBzdGlsbCBoYXZlIHRvIGZvcm1hbGl6ZQogICAqIGl0IGluIEpTT04gU2NoZW1hIERyYWZ0IDcqLwogIGFkZFNjaGVtYShlZGl0b3IsIFt7CiAgICBzY2hlbWE6IHNjaGVtYSwKICAgIHVyaTogdXJpLAogICAgZmlsZU1hdGNoOiBbZmlsZU1hdGNoXQogIH1dKTsKfTsKZXhwb3J0IHZhciBnZXRNb25hY29Nb2RlbEZvclVyaSA9IGZ1bmN0aW9uIGdldE1vbmFjb01vZGVsRm9yVXJpKG1vZGVsVXJpLCBpbml0aWFsVmFsdWUpIHsKICB2YXIgdmFsdWUgPSBpbml0aWFsVmFsdWUgIT09IG51bGwgJiYgaW5pdGlhbFZhbHVlICE9PSB2b2lkIDAgPyBpbml0aWFsVmFsdWUgOiAnJzsKICB2YXIgbW9kZWwgPSBtb25hY28uZWRpdG9yLmdldE1vZGVsKG1vZGVsVXJpKTsKCiAgaWYgKG1vZGVsKSB7CiAgICBtb2RlbC5zZXRWYWx1ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIG1vZGVsID0gbW9uYWNvLmVkaXRvci5jcmVhdGVNb2RlbCh2YWx1ZSwgJ2pzb24nLCBtb2RlbFVyaSk7CiAgfQoKICByZXR1cm4gbW9kZWw7Cn07"},{"version":3,"sources":["/Users/qsrodri/pm4/jsonforms-vuetify-renderers/node_modules/eslint-loader/index.js??ref--13-0!/Users/qsrodri/pm4/jsonforms-vuetify-renderers/example/src/core/jsonSchemaValidation.ts"],"names":[],"mappings":"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","sourcesContent":["import editorApi from 'monaco-editor/esm/vs/editor/editor.api';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport { JsonSchema } from '@jsonforms/core';\n\nimport { jsonSchemaDraft7, ruleSchema, uiSchema } from '../core/jsonschema';\n\nexport type EditorApi = typeof editorApi;\n\n/**\n * Register a new schema for the Json language, if it isn't already registered.\n * Schemas are identified by their uri and fileMatch rule, so that they don't\n * leak into unrelated Json editors.\n * @param editor\n *  The monaco editor\n * @param schemas\n *  Schemas to register\n */\nexport const addSchema = (\n  editor: EditorApi,\n  schemas: {\n    uri: string;\n    fileMatch?: string[];\n    schema?: JsonSchema;\n  }[]\n): void => {\n  const registeredSchemas =\n    editor.languages.json.jsonDefaults.diagnosticsOptions.schemas;\n  if (registeredSchemas === undefined || registeredSchemas.length === 0) {\n    editor.languages.json.jsonDefaults.setDiagnosticsOptions({\n      validate: true,\n      allowComments: false,\n      enableSchemaRequest: false,\n      schemaRequest: 'warning',\n      schemaValidation: 'error',\n      schemas: [...schemas],\n    });\n  } else {\n    for (const schema of schemas) {\n      const fileMatch = schema.fileMatch;\n\n      const gridSchema = registeredSchemas.find(\n        (registeredSchema) =>\n          registeredSchema.fileMatch === fileMatch &&\n          registeredSchema.uri === schema.uri\n      );\n      if (!gridSchema) {\n        registeredSchemas.push({ ...schema });\n      }\n    }\n  }\n};\n\n/**\n * Configures the Monaco Editor to validate the input against JSON Schema Draft 7.\n */\nexport const configureJsonSchemaValidation = (\n  editor: EditorApi,\n  fileMatch: string[]\n): void => {\n  /** Note that the Monaco Editor only supports JSON Schema Draft 7 itself,\n   * so if we also want to support a later standard we still have to formalize\n   * it in JSON Schema Draft 7*/\n  addSchema(editor, [{ ...jsonSchemaDraft7, fileMatch }]);\n};\n\n/**\n * Configures the Monaco Editor to validate the input against the UI Schema meta-schema.\n */\nexport const configureUISchemaValidation = (\n  editor: EditorApi,\n  fileMatch: string[]\n): void => {\n  /** Note that the Monaco Editor only supports JSON Schema Draft 7 itself,\n   * so if we also want to support a later standard we still have to formalize\n   * it in JSON Schema Draft 7*/\n  addSchema(editor, [\n    { ...jsonSchemaDraft7 },\n    { ...ruleSchema },\n    { ...uiSchema, fileMatch },\n  ]);\n};\n\n/**\n * Configures the Monaco Editor to validate the input against JSON Schema model schema.\n */\nexport const configureDataValidation = (\n  editor: EditorApi,\n  uri: string,\n  fileMatch: string,\n  schema: JsonSchema\n): void => {\n  /** Note that the Monaco Editor only supports JSON Schema Draft 7 itself,\n   * so if we also want to support a later standard we still have to formalize\n   * it in JSON Schema Draft 7*/\n  addSchema(editor, [{ schema, uri, fileMatch: [fileMatch] }]);\n};\n\nexport const getMonacoModelForUri = (\n  modelUri: monaco.Uri,\n  initialValue: string | undefined\n): editorApi.editor.ITextModel => {\n  const value = initialValue ?? '';\n  let model = monaco.editor.getModel(modelUri);\n  if (model) {\n    model.setValue(value);\n  } else {\n    model = monaco.editor.createModel(value, 'json', modelUri);\n  }\n  return model;\n};\n"],"sourceRoot":""}]}